@page "/hue"

@inject IHueService _hueService
@inject IRemoteHueService _remoteHueService
@inject AppState appState
@inject IModalService Modal
@inject IOptionsMonitor<BaseConfig> Config
@inject ILogger<HueSetup    > _logger;

<div class="container text-body" style="overflow:hidden">
    <div class="row">
        <div class="container-fluid">
            <div class="row-fluid">
                <div>
                    <h1>Configure Phillips Hue</h1>
                    <br />
                    <br />
                    <div class="row">
                        <div class="col-4">
                            <input type="checkbox" checked="@Config.CurrentValue.LightSettings.Hue.IsEnabled" @bind-value="@Config.CurrentValue.LightSettings.Hue.IsEnabled" /> Connect to Phillips Hue
                        </div>
                        @if (Config.CurrentValue.LightSettings.Hue.IsEnabled)
                        {
                            <div class="col-4">
                                <input type="checkbox" checked="@Config.CurrentValue.LightSettings.Hue.UseRemoteApi" @bind-value="@Config.CurrentValue.LightSettings.Hue.UseRemoteApi" /> Use Remote Api
                            </div>
                            <div class="col-4">
                                <button class="btn btn-primary" disabled="@(!Config.CurrentValue.LightSettings.Hue.UseRemoteApi)" @onclick="LoginRemoteApi">Login to Hue Cloud</button>
                            </div>
                        }
                    </div>
                    <br />
                    <br />
                    @if (Config.CurrentValue.LightSettings.Hue.IsEnabled)
                    {
                        <EditForm Model="@tempConfig" OnValidSubmit="RegisterBridge">
                            <InputText id="name" @bind-Value="@tempConfig.LightSettings.Hue.HueIpAddress" />
                            <br />
                            <DataAnnotationsValidator />
                            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />
                            <br />
                            <br />
                            <button class="btn btn-primary" type="submit">Register Bridge</button>
                        </EditForm>

                        <br />

                        @if (showHueMessage)
                        {
                            <span class="@hueMessageClass">@hueMessage</span>
                        }
                        <br />
                        <br />
                        @if (appState.HueLights != null)
                        {
                            <div class="form-group col-3  centering text-center">
                                <select class="form-control" @onchange="OnChange">
                                    <option disabled="disabled">Select</option>
                                    @foreach (var light in appState.HueLights)
                                    {
                                        @if (tempConfig.LightSettings.Hue.SelectedItemId == light.Id)
                                        {
                                            <option selected="selected" value=@light.Id>@light.Name</option>
                                        }
                                        else
                                        {
                                            <option value=@light.Id>@light.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        }

                        <br />
                        <br />

                        <Statuses Light="@Config.CurrentValue.LightSettings.Hue"></Statuses>

                        <br />
                        <br />
                        @if (!string.IsNullOrEmpty(tempConfig.LightSettings.Hue.HueApiKey))
                        {
                            <button class="btn btn-primary" @onclick="Save">Save Hue Settings</button>
                        }
                        <br />
                        <br />
                        @if (settingsSaved)
                        {
                            <span class="text-success">@message</span>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private BaseConfig tempConfig;

    private void Save()
    {
        try
        {
            SettingsService.SaveSettings(Config.CurrentValue);
            _hueService.Initialize(Config.CurrentValue);
            message = "Settings Saved";
            settingsSaved = true;
        }
        catch (Exception e)
        {
            Helpers.AppendLogger(_logger, "Error Occured Saving Hue Settings", e);
            throw e;
        }
    }

    private async void LoginRemoteApi()
    {
        try
        {
            var (bridgeId, apiKey, bridgeIp) = await _remoteHueService.RegisterBridge();
            if (!string.IsNullOrEmpty(apiKey) && !string.IsNullOrEmpty(bridgeId) && !string.IsNullOrEmpty(bridgeIp))
            {
                Config.CurrentValue.LightSettings.Hue.HueApiKey = apiKey;
                Config.CurrentValue.LightSettings.Hue.RemoteBridgeId = bridgeId;
                Config.CurrentValue.LightSettings.Hue.HueIpAddress = bridgeIp;

                SettingsService.SaveSettings(Config.CurrentValue);
            }
        }
        catch (Exception ex)
        {
            Helpers.AppendLogger(_logger, "Error Occured Getting Hue Api Key", ex);
        }
    }


    bool settingsSaved = false;
    string message;
    string hueMessageClass;

    bool showHueMessage = false;
    string hueMessage;

    bool showAvail = false;
    bool showAct = false;

    void ToggleAvail()
    {
        showAvail = !showAvail;

        if (showAct)
        {
            showAct = !showAct;
        }
    }

    void ToggleAct()
    {
        showAct = !showAct;

        if (showAvail)
        {
            showAvail = !showAvail;
        }
    }

    async Task RegisterBridge()
    {
        var formModal = Modal.Show<Confirm>("Please press the sync button on your Phillips Hue Bridge");
        var result = await formModal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            try
            {
                tempConfig.LightSettings.Hue.HueApiKey = await _hueService.RegisterBridge();
            }
            catch (Exception ex)
            {
                Helpers.AppendLogger(_logger, "Error Occured Registering Hue Bridge", ex);
                hueMessage = "Error Occured registering bridge, please try again";
                showHueMessage = true;
                hueMessageClass = "text-danger";
            }

            if (!string.IsNullOrEmpty(tempConfig.LightSettings.Hue.HueApiKey))
            {
                try
                {
                    showHueMessage = true;
                    hueMessage = "App Registered with Bridge";
                    hueMessageClass = "text-success";

                    appState.SetHueLights(await _hueService.GetLights());

                    if (string.IsNullOrEmpty(Config.CurrentValue.LightSettings.Hue.SelectedItemId) && appState.HueLights.Count() > 0)
                    {
                        tempConfig.LightSettings.Hue.SelectedItemId = appState.HueLights.FirstOrDefault().Id;
                    }
                }
                catch (Exception e)
                {
                    Helpers.AppendLogger(_logger, "Error Occured Getting Hue Lights", e);
                    throw e;
                }
                Config.CurrentValue.LightSettings.Hue.HueIpAddress = tempConfig.LightSettings.Hue.HueIpAddress;
                Config.CurrentValue.LightSettings.Hue.HueApiKey = tempConfig.LightSettings.Hue.HueApiKey;
                Config.CurrentValue.LightSettings.Hue.SelectedItemId = tempConfig.LightSettings.Hue.SelectedItemId;

                Save();
            }

            else
            {
                Helpers.AppendLogger(_logger, "Hue Api Key not configured");
                hueMessage = "Api Key Not Created, please try again and ensure you press the sync button on your bridge";
                showHueMessage = true;
                hueMessageClass = "text-danger";
            }
        }
    }

    private void OnChange(ChangeEventArgs e)
    {
        var light = e.Value.ToString();
        tempConfig.LightSettings.Hue.SelectedItemId = light;
        Config.CurrentValue.LightSettings.Hue.SelectedItemId = light;
        appState.SetHueLight(light);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tempConfig = Config.CurrentValue;

            if (!string.IsNullOrEmpty(tempConfig.LightSettings.Hue.HueApiKey))
            {
                appState.SetHueLights(await _hueService.GetLights());
            }

            appState.OnChange += RaiseStateHasChanged;
        }
        catch (Exception e)
        {
            Helpers.AppendLogger(_logger, "Error Occured loading Hue Setup", e);
            throw e;
        }
    }

    public void Dispose()
    {
        appState.OnChange -= RaiseStateHasChanged;
    }

    private void RaiseStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }
}
